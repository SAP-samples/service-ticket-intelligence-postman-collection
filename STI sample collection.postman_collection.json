{
	"info": {
		"_postman_id": "c44640a3-42f3-4897-90ab-296db4adb7a9",
		"name": "STI sample collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Access Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07e8a5df-40d9-4f07-99f3-86d672783ec7",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "uaa-clientid",
							"type": "string"
						},
						{
							"key": "password",
							"value": "uaa-clientsecret",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{uaa_url}}/oauth/token",
					"host": [
						"{{uaa_url}}"
					],
					"path": [
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all models",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model"
					]
				}
			},
			"response": []
		},
		{
			"name": "List active models",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model?model_status=ACTIVE",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model"
					],
					"query": [
						{
							"key": "model_status",
							"value": "ACTIVE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List models - filter language en",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model?model_language=en",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model"
					],
					"query": [
						{
							"key": "model_language",
							"value": "en"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List models - filter business object ticket",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model?model_business_object=ticket",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model"
					],
					"query": [
						{
							"key": "model_business_object",
							"value": "ticket"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload Classification Training File (travel data - small)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"model_id\", jsonData.model_id);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"scenario\":\n  {\n      \"desc\":\"Training Classification travel data (small)\",\n      \"type\":\"classification\",\n      \"language\":\"en\",\n      \"business_object\":\"ticket\"\n  },\n  \"mapping\":\n  {\n        \"input\": [\"description\"],\n        \"output\": [\"category\"]\n  },\n  \"training\":\n  {\n        \"file\": \"\"\n  }\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload Classification Training File with tabulate (travel data - small)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"model_id\", jsonData.model_id);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"scenario\":\n  {\n      \"desc\":\"Training Classification travel data with tabulate (small)\",\n      \"type\":\"classification\",\n      \"language\":\"en\",\n      \"business_object\":\"ticket\"\n  },\n  \"mapping\":\n  {\n        \"input\": [\"description\"],\n        \"output\": [\"category\"]\n  },\n  \"tabulating\": \n  [ \n  \t\t{\t\"source\": \"description\", \"topic\": \"category\"}\n  ],\n  \"training\":\n  {\n        \"file\": \"\"\n  }\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload Classification Incremental Training File (travel data - small)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"model_id\", jsonData.model_id);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"reference_model_id\": \"{{model_id}}\",\n  \"training\":\n  {\n        \"file\": \"\"\n  }\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/increment",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"increment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload Recommendation Training File (random Q&A - small)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"model_id\", jsonData.model_id);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"scenario\":\n  {\n      \"desc\":\"Train Question Recommendation random questions (small)\",\n      \"type\":\"recommendation\",\n      \"language\":\"en\",\n      \"business_object\":\"ticket\"\n  },\n  \"mapping\":\n  {\n        \"input\": [\"subject\"],\n        \"output\": [\"datasource\", \"article_id\"]\n  },\n  \"training\":\n  {\n        \"file\": \"\"\n  }\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model"
					]
				}
			},
			"response": []
		},
		{
			"name": "Upload Recommendation Incremental Training File (random Q&A - small)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"model_id\", jsonData.model_id);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"reference_model_id\": \"{{model_id}}\",\n  \"training\":\n  {\n        \"file\": \"\"\n  }\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/increment",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"increment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Extract OData",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"model_id\", jsonData.model_id);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"scenario\":\n   {\n      \"desc\":\"Training Classification from OData\",\n      \"type\":\"classification\",\n      \"language\":\"en\",\n      \"business_object\":\"ticket\"\n   },\n   \"mapping\":\n   {\n        \"input\": [\"Name\", \"Text\"],\n        \"output\": [\"ServiceIssueCategoryID\"]\n   },\n   \"odata\":\n   {\n        \"credential\": \n        {\n            \"service_url\": \"{{odata_service_url}}\",\n            \"authorization\": \"{{odata_authorization}}\"\n        },\n        \"application\":\"C4C\",\n        \"query_options\":\n        {\n            \"entity\":\"ServiceRequestCollection\",\n            \"select\":\"Name,ServiceIssueCategoryID\",\n            \"filter\":\"ETag ge datetimeoffset'2018-09-07T07:32:10.00Z' and ETag le datetimeoffset'2018-09-07T08:53:35.00Z' and ServiceIssueCategoryID ne null\",\n            \"orderby\":\"\",\n            \"expand\":\"\",\n            \"batch_query_options\":\n            {\n                \"entity\":\"ServiceRequestDescription\",\n                \"select\":\"Text\",\n                \"filter\":\"TypeCode eq '10004'\",\n                \"orderby\":\"\",\n                \"expand\":\"\"\n            }\n        }\n    }\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model"
					]
				}
			},
			"response": []
		},
		{
			"name": "Extract OData Incremental",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"model_id\", jsonData.model_id);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"reference_model_id\": \"{{model_id}}\",\n   \"odata\":\n   {\n        \"credential\": \n        {\n            \"service_url\": \"{{odata_service_url}}\",\n            \"authorization\": \"{{odata_authorization}}\"\n        },\n        \"application\":\"C4C\",\n        \"query_options\":\n        {\n            \"entity\":\"ServiceRequestCollection\",\n            \"select\":\"Name,ServiceIssueCategoryID\",\n            \"filter\":\"ETag ge datetimeoffset'2018-09-07T13:23:10.00Z' and ETag le datetimeoffset'2018-09-07T14:36:57.00Z' and ServiceIssueCategoryID ne null\",\n            \"orderby\":\"\",\n            \"expand\":\"\",\n            \"batch_query_options\":\n            {\n                \"entity\":\"ServiceRequestDescription\",\n                \"select\":\"Text\",\n                \"filter\":\"TypeCode eq '10004'\",\n                \"orderby\":\"\",\n                \"expand\":\"\"\n            }\n        }\n    }\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/increment",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"increment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get model status",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model/status?model_id={{model_id}}",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model",
						"status"
					],
					"query": [
						{
							"key": "model_id",
							"value": "{{model_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Start model training",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{   \n    \"model_id\": \"{{model_id}}\"\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model/train",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model",
						"train"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get model accuracy",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model/accuracy?model_id={{model_id}}",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model",
						"accuracy"
					],
					"query": [
						{
							"key": "model_id",
							"value": "{{model_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Activate model",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{   \n    \"model_id\": \"{{model_id}}\"\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model/activate",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model",
						"activate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deactivate model",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{   \n    \"model_id\": \"{{model_id}}\"\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model/deactivate",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model",
						"deactivate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete model",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model?model_id={{model_id}}",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model"
					],
					"query": [
						{
							"key": "model_id",
							"value": "{{model_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Disable model category",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{   \n    \"model_id\": \"{{model_id}}\",\n    \"contents\": [ \n    \t{\t\"category_class\": [ \"complaint\" ],\n    \t\t\"field\": \"category\" } \n    \t]\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model/disable/category",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model",
						"disable",
						"category"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable model category",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{   \n    \"model_id\": \"{{model_id}}\",\n    \"contents\": [ \n    \t{\t\"category_class\": [ \"complaint\" ],\n    \t\t\"field\": \"category\" } \n    \t]\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/training/model/enable/category",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"model",
						"enable",
						"category"
					]
				}
			},
			"response": []
		},
		{
			"name": "Classify single message (without options)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \n\t\"business_object\": \"ticket\",\n    \"messages\":[\n\t\t{ \"id\": 2001, \"contents\": [{\"field\": \"description\", \"value\": \"you customer service is so terrible, nobody ever picks up the phone when i call\" }]}\n    ]\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/text/classify",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"text",
						"classify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Classify single message with top-k classification option",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \n\t\"business_object\": \"ticket\",\n    \"messages\":[\n\t\t{ \"id\": 2001, \"contents\": [{\"field\": \"description\", \"value\": \"you customer service is so terrible, nobody ever picks up the phone when i call\" }]}\n    ],\n    \"options\": {\"classification_top_k\": 3}\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/text/classify",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"text",
						"classify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Classify single message with top-k keyword option",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \n\t\"business_object\": \"ticket\",\n    \"messages\":[\n\t\t{ \"id\": 2001, \"contents\": [{\"field\": \"description\", \"value\": \"you customer service is so terrible, nobody ever picks up the phone when i call\" }]}\n    ],\n    \"options\": {\"classification_keyword_top_k\": 3}\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/text/classify",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"text",
						"classify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Classify single message with threshold option",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \n\t\"business_object\": \"ticket\",\n    \"messages\":[\n\t\t{ \"id\": 2001, \"contents\": [{\"field\": \"description\", \"value\": \"you customer service is so terrible, nobody ever picks up the phone when i call\" }]}\n    ],\n    \"options\": {\n    \t\"thresholds\": [\n    \t\t{ \t\"field\": \"category\",\n\t\t\t\t\"value\": 0.5, \"low_confidence_label\": \"customized low confidence label\"\n    \t\t}\n    \t]\n    }\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/text/classify",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"text",
						"classify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Classify multiple messages",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \n\t\"business_object\": \"ticket\",\n    \"messages\":[\n\t\t{ \"id\": 2001, \"contents\": [{\"field\": \"description\", \"value\": \"you customer service is so terrible, nobody ever picks up the phone when i call\" }]},    \t\n\t\t{ \"id\": 2002, \"contents\": [{\"field\": \"description\", \"value\": \"what is your website?\"}]},\n\t\t{ \"id\": 2003, \"contents\": [{\"field\": \"description\", \"value\": \"Just watched my favorite movie on in-flight entertainment. How awesome is that please!\"}]}\n    ]\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/text/classify",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"text",
						"classify"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get topics tabulate",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"url": {
					"raw": "{{sti_service_url}}/sti/training/topic/tabulate?model_id={{model_id}}&sources=description",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"training",
						"topic",
						"tabulate"
					],
					"query": [
						{
							"key": "model_id",
							"value": "{{model_id}}"
						},
						{
							"key": "sources",
							"value": "description"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Recommend Solution",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \n\t\"business_object\": \"ticket\",\n    \"messages\":[\n\t\t{ \"id\": 2001, \"contents\": [\n\t\t\t{ \"field\": \"subject\", \"value\": \"If Hillary Clinton can no longer serve as the Democratic nominee how would her successor be chosen\" }]\n\t\t}\n    ]\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/solution/recommend",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"solution",
						"recommend"
					]
				}
			},
			"response": []
		},
		{
			"name": "Recommend Solution with threshold option",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \n\t\"business_object\": \"ticket\",\n    \"messages\":[\n\t\t{ \"id\": 2001, \"contents\": [\n\t\t\t{ \"field\": \"subject\", \"value\": \"If Hillary Clinton can no longer serve as the Democratic nominee how would her successor be chosen\" }]\n\t\t}\n    ],\n    \"options\":{ \n    \t\"threshold\":{ \n    \t\t\"value\":0.85,\n    \t\t\"high_confidence_label\": \"high confidence custom label\", \n    \t\t\"low_confidence_label\":\"low confidence custom label\"\n    \t\t}\n\t}\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/solution/recommend",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"solution",
						"recommend"
					]
				}
			},
			"response": []
		},
		{
			"name": "Recommend Solution with top-k recommendation option",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \n\t\"business_object\": \"ticket\",\n    \"messages\":[\n\t\t{ \"id\": 2001, \"contents\": [\n\t\t\t{ \"field\": \"subject\", \"value\": \"If Hillary Clinton can no longer serve as the Democratic nominee how would her successor be chosen\" }]\n\t\t}\n    ],\n    \"options\":{\"recommendation_top_k\": 5}\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/solution/recommend",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"solution",
						"recommend"
					]
				}
			},
			"response": []
		},
		{
			"name": "Recommend multiple messages",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{correlation_id_prefix}}-{{$timestamp}}-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \n\t\"business_object\": \"ticket\",\n    \"messages\":[\n\t\t{ \"id\": 2001, \"contents\": [{\"field\": \"subject\", \"value\": \"If Hillary Clinton can no longer serve as the Democratic nominee how would her successor be chosen\" }]},    \t\n\t\t{ \"id\": 2002, \"contents\": [{\"field\": \"subject\", \"value\": \"you customer service is so terrible, nobody ever picks up the phone when i call\"}]},\n\t\t{ \"id\": 2003, \"contents\": [{\"field\": \"subject\", \"value\": \"Just watched my favorite movie on in-flight entertainment. How awesome is that please!\"}]}\n    ]\n}"
				},
				"url": {
					"raw": "{{sti_service_url}}/sti/solution/recommend",
					"host": [
						"{{sti_service_url}}"
					],
					"path": [
						"sti",
						"solution",
						"recommend"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}
